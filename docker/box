#!/usr/bin/env bash

volumes=""

print_usage(){
    cat <<EOF
box usage:

enter [-v VOLUME ...] IMAGE
  enter a development box
  VOLUME  docker volumes to mount to /vols/
  IMAGE   docker image name. default 'dev'

stop BOX ...
  stop running box(es)
  BOX     box name

list
  list created boxes

-h
  show this help

EOF
}

list(){
    docker ps -f 'label=groupname=enter' --format '{{.Labels}}' \
        | awk -F'label=' '{print $2}' |  awk -F',' '{print $1}'
    exit $?
}

strip_dots(){
    host="$1"
    host="${host//./-}" # replace dot
    host="${host//:/_}" # replace column
    echo $host
}

stop(){
    for name in "$@"; do
        host=$(strip_dots "$name")
        docker stop $host > /dev/null
        if [ $? -eq 0 ]; then
            echo $host stopped
        else
            >&2 echo error ocurred stopping $host
            exit 1
        fi
    done
    exit 0
}

case "$1" in
    list)   list ;;
    enter)  shift ;;
    stop)   shift
            stop "$@" ;;
    -h)     print_usage
            exit 1 ;;
    "")     ;;
    *)      >&2 echo "invalid arg '$1'"
            exit 1 ;;
esac


# process enter

# parse args
while getopts 'v:h' flag; do
    case "${flag}" in
        v) volumes="$volumes -v $OPTARG:/vols/$OPTARG" ;;
        h) print_usage
            exit 1 ;;
    esac
done
shift $(expr $OPTIND - 1 )

image="$1"
[ -z "$1" ] && image="dev"
label="$image"

ensure_volume_exists(){
    docker volume ls -q | grep "$1" &> /dev/null || docker volume create "$1"
    [ $? -ne 0 ] && >&2 echo error creating docker volume "$1" && exit 1
}

image_name(){
    tmp=$(awk -F "=" "/$1/ {print \$2}" "$HOME/dotfiles/docker/images.ini")
    if [ "$tmp" = "" ]; then
        echo $1
    else
        echo $tmp
    fi
}

run(){
    # start if not running
    ps=$(docker ps --filter "name=^/$name$" --format '{{.Names}}')
    if [ "$ps" = "" ]; then
        # start
        docker run --rm -d --name $name $volumes \
            -h $name \
            -l "groupname=enter" \
            -l "label=$label" \
            -v projects:/projects \
            -v go:/usr/local/go \
            -v home:/root \
            -v dev-env-docker_home:/twhome \
            -w /root \
            $image tail -f /dev/null \
            > /dev/null
    else
        [ "$volumes"  = "" ] || >&2 echo $image already running, discarding volumes.
    fi

    # run command
    cmd="$@"
    if [ "$cmd" = "" ]; then
        # get command from container image
        container_image="$(docker inspect $name -f '{{.Image}}')"
        cmd=$(docker image inspect "$container_image" -f '{{join .Config.Entrypoint ""}}{{join .Config.Cmd " "}}')
    fi
    docker exec -it -w /root "$name" $cmd
}

name="$(strip_dots "$image")"
image=$(image_name "$image")
shift # discard first arg

ensure_volume_exists projects
ensure_volume_exists go
ensure_volume_exists home
ensure_volume_exists dev-env-docker_home

run "$@"

