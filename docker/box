#!/usr/bin/env bash



print_usage(){
    cat <<EOF
box usage:

create [-v VOLUME ...] [-w DIR] [-i IMAGE] NAME
  create a container box
  VOLUME  docker volumes to mount to /vols/
  DIR     default working directory for 'enter'
  IMAGE   docker image name. default 'box'.
          tag an existing image as 'box' to use as default
  NAME    container box name

enter [-w DIR] NAME
  enter a container box
  DIR     working directory
  NAME    container box name


rm NAME ...
  remove container box(es)
  NAME    container box name

list
  list created container boxes

-h
  show this help

EOF
}

log(){
    >&2 echo $@
}

err(){
    log $@
    exit 1
}

box_name(){
    if [ -z "$1" ]; then
        echo box_default
    else
        echo "box_$1"
    fi
}

create(){
    volumes=""
    wd=""
    image=""

    # parse args
    while true; do
        case "$1" in
            -v) shift
                ensure_volume_exists $1
                volumes="$volumes -v $1:/vols/$1"
                shift ;;
            -w) shift
                [ "$wd" = "" ] || err working directory is not a list
                wd="-w $1"
                shift ;;
            -i) shift
                image="$1"
                shift ;;
            -h) print_usage
                exit 1 ;;
            *)  break ;;
        esac
    done

    [ "$image" = "" ] && image="dev"

    name="$1"
    label="$name"
    [ -z "$1" ] && label="default" && name="default"
    image=$(image_name "$image")
    shift

    ensure_volume_exists box_home

    echo "$(list)" | grep "$name" > /dev/null && err "box $name already exists"
    docker run -d --name "$(box_name $name)" $volumes $wd \
        -h $name \
        -l "groupname=box" \
        -l "label=$label" \
        -v box_home:/root \
        $image tail -f /dev/null \
        > /dev/null
    [ $? -ne 0 ] && err "error creating box '$name'"
    return 0
}

list(){
    docker ps -a -f 'label=groupname=box' --format '{{.Labels}}' \
        | awk -F'label=' '{print $2}' |  awk -F',' '{print $1}' | sort
    exit $?
}

status(){
    docker inspect "$(box_name $1)" --format='{{.State.Status}}' 2> /dev/null
}

remove(){
    for name in "$@"; do
        box="$(box_name "$name")"
        docker stop $box > /dev/null && docker rm $box > /dev/null
        if [ $? -eq 0 ]; then
            echo $name removed
        else
            err error ocurred removing $name
        fi
    done
    exit 0
}

ensure_volume_exists(){
    docker volume ls -q | grep "$1" &> /dev/null || docker volume create "$1"
    [ $? -ne 0 ] && err error creating docker volume "$1"
}

enter(){
    wd=""

    # parse args
    while true; do
        case "$1" in
            -w) shift
                [ "$wd" = "" ] || err working directory is not a list
                wd="-w $1"
                shift ;;
            -h) print_usage
                exit 1 ;;
            *)  break ;;
        esac
    done

    name="$1"
    [ -z "$1" ] && name="default"
    shift

    box_status="$(status "$name")"
    case "${box_status}" in
        exited|created) docker start "$(box_name $name)" > /dev/null || err error starting $name ;;
        running)        ;;
        "")             err "box '$name' does not exist, create with 'box create $name'" ;;
        *)              err unknown status $box_status ;;
    esac

    # run command
    cmd="$@"
    if [ "$cmd" = "" ]; then
        # get command from container image
        container_image="$(docker inspect "$(box_name $name)" -f '{{.Image}}')"
        cmd=$(docker image inspect "$container_image" -f '{{join .Config.Entrypoint ""}}{{join .Config.Cmd " "}}')
    fi
    docker exec -it $wd "$(box_name $name)" $cmd
}

case "$1" in
    create) shift
            create "$@" ;;
    list)   list ;;
    enter)  shift
            enter "$@" ;;
    rm)     shift
            remove "$@" ;;
    -h|"")  print_usage
            exit 1 ;;
    *)      err "invalid arg '$1'";;
esac


